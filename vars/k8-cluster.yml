# General configuration
cluster_name: k8s-test
required_helm: true

# Version flags
cluster_version: 1.30.1
kubeadm_version: 1.29
etcd_version: 3.5.14
helm_version: 3.15.2

# choose between crio/ containerd / cri-dockerd
container_runtime:
  name: crio
  version: 1.30.3

# choose between calico/ fannel / cilium
cni_plugin: 
  name: calico
  version: 3.28.0



github_url: https://github.com
dl_k8s_io_url: https://dl.k8s.io
storage_googleapis_url: https://storage.googleapis.com
get_helm_url: https://get.helm.sh
kube_image_repo: registry.k8s.io






# Network configuration

network:
  network_cidr: 192.168.200.0/24
  domain: k8s.test
  additional_san: ""
  pod_cidr: 10.20.0.0/16
  service_cidr: 10.110.0.0/16



# Rook configuration
rook_ceph:
  install_rook: false
  volume_size: 50
  rook_cluster_size: 1

# Ingress controller configuration [nginx/haproxy/contour]

ingress_controller:
  install_ingress_controller: true
  type: haproxy
  node_port:
    http: 31080
    https: 31443

# Section for metalLB setup

metallb:
  install_metallb: false
  l2:
    iprange: 192.168.200.210-192.168.200.250

cni_plugin_urls:
  - calico: 
      calico_download_url: 
  - fannel:
      fannel_download_url:
  - cilium:
      

required_tools:
- calico:
    calicoctl_download_url: "{{ github_url }}/projectcalico/calico/releases/download/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}"
    crictl_download_url: "{{ github_url }}/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-{{ ansible_system | lower }}-{{ image_arch }}.tar.gz"
    calico_crds_download_url: "{{ github_url }}/projectcalico/calico/archive/{{ calico_version }}.tar.gz"

- cilium:
    ciliumcli_download_url: "{{ github_url }}/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-{{ image_arch }}.tar.gz"
    
cri_download_url:
- crio:
    curl: "{{ storage_googleapis_url }}/cri-o/artifacts/cri-o.{{ image_arch }}.{{ crio_version }}.tar.gz"
- containerd:
    containerd_download_url: "{{ github_url }}/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"
- cri-dockerd:
    cri_dockerd_download_url: "{{ github_url }}/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.{{ image_arch }}.tgz"

req_downloads:
  all_nodes: 
    - kubeadm: "{{ dl_k8s_io_url }}/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm"
    - kube-proxy: "{{dl_k8s_io_url}}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kube-proxy"

  control_plane_components:
    - kubectl: "{{ dl_k8s_io_url }}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kubectl"
    - kube-apiserver: "{{ dl_k8s_io_url }}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kube-apiserver"
    - kube-controller-manager: "{{dl_k8s_io_url}}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kube-proxy"
    - kube-scheduler: "{{ dl_k8s_io_url }}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kube-scheduler"
    - helm: "{{ get_helm_url }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz"
  
  worker_node_components:
    - kubelet: "{{dl_k8s_io_url}}/release/{{ cluster_version }}/bin/linux/{{ image_arch }}/kubelet"
    
  
  etcd_components:
    - etcd: "{{github_url}}/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz"

